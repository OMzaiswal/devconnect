// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String  @id @default(cuid())
  name String
  email String  @unique
  password String
  username String @unique
  gender String?
  age Int?
  bio String?
  posts Post[]
  likes Like[]
  comments Comment[]
  skills Skill[]
  followers Follow[] @relation("userFollowers")
  following Follow[] @relation("userFollowing")
  notifications Notification[]  @relation("Notifications")
  sentNotifications Notification[] @relation("SentNotifications")
}

model Post {
  id String  @id @default(cuid())
  content String
  imgUrl String?
  author User  @relation(fields: [authorId], references: [id])
  authorId String
  likes Like[]
  comments Comment[]
}

model Like {
  id String @id @default(cuid())
  post Post  @relation(fields: [postId], references: [id])
  postId String
  user User   @relation(fields: [userId], references: [id])
  userId String
}

model Comment {
  id String @id @default(cuid())
  text String
  post Post  @relation(fields: [postId], references: [id])
  postId String
  user User  @relation(fields: [userId], references: [id])
  userId String
  createdAt DateTime @default(now())

}

model Skill {
  id String @id @default(cuid())
  name String
  user User  @relation(fields: [userId], references: [id])
  userId String
}

model Follow {
  id String @id @default(cuid())
  follower User @relation("userFollowers" ,fields: [followerId], references: [id])
  followerId String
  following User @relation("userFollowing", fields: [followingId], references: [id])
  followingId String
  createdAt DateTime @default(now())
}

model Notification {
  id String @id @default(cuid())
  type String // like, comment, follow
  message String
  user User  @relation("Notifications", fields: [userId], references: [id])
  userId String
  fromUser User  @relation("SentNotifications", fields: [fromUserId], references: [id])
  fromUserId String
  read Boolean  @default(false)
  createdAt DateTime  @default(now())
}
